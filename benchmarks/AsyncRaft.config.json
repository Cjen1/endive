{
    "preds"  :  [
        "(currentTerm[VARI] > currentTerm[VARJ])",
        "(currentTerm[VARJ] > currentTerm[VARI])",

        "(currentTerm[VARI] >= currentTerm[VARJ])",
        "(currentTerm[VARJ] >= currentTerm[VARI])",

        "(currentTerm[VARI] <= currentTerm[VARJ])",
        "(currentTerm[VARJ] <= currentTerm[VARI])",

        "(currentTerm[VARI] = currentTerm[VARJ])",
    
        "(state[VARI] = Primary)",
        "(state[VARJ] = Primary)"
    ],
    "preds_alt" : [],
    "safety"  :  "H_NoLogDivergence",
    "constants"  : {
        "n1" : "n1",
        "n2" : "n2",
        "n3" : "n3",
        "n4" : "n4",
        "n5" : "n5",
        "v1" : "v1",
        "Server" : [ "{n1,n2}", "{n1,n2,n3}"],
        "Follower" : "Follower",
        "Candidate" : "Candidate",
        "Leader" : "Leader",
        "Nil" : "Nil",
        "RequestVoteRequest" : "RequestVoteRequest",
        "RequestVoteResponse" : "RequestVoteResponse",
        "AppendEntriesRequest" : "AppendEntriesRequest",
        "AppendEntriesResponse" : "AppendEntriesResponse",
        "EqualTerm" : "EqualTerm",
        "LessOrEqualTerm" : "LessOrEqualTerm",
        "MaxTerm" : ["2", "3"],
        "MaxLogLen" : ["1", "2", "3"],
        "MaxNumVoteMsgs": ["0"]
    },
    "actions": [
        "RequestVoteAction",
        "BecomeLeaderAction",
        "ClientRequestAction",
        "AdvanceCommitIndexAction",
        "AppendEntriesAction",
        "UpdateTermRVReqAction",
        "UpdateTermRVResAction",
        "UpdateTermAEReqAction",
        "UpdateTermAEResAction",
        "HandleRequestVoteRequestAction",
        "HandleRequestVoteResponseAction",
        "RejectAppendEntriesRequestAction",
        "AcceptAppendEntriesRequestAppendAction",
        "AcceptAppendEntriesRequestLearnCommitAction",
        "HandleAppendEntriesResponseAction"
    ],
    "constraint"  :  "StateConstraint",
    "quant_inv"  :  "",
    "quant_inv_alt"  :  null,
    "quant_vars": ["VARI", "VARJ"],
    "model_consts"  :  "CONSTANT n1,n2,n3,n4,n5",
    "symmetry" : true,
    "typeok"  :  "TypeOKRandom",
    "tlc_specific_spec": true,
    "try_final_minimize": false,
    "simulate"  :  true,
    "local_grammars": {
        "AcceptAppendEntriesRequestTruncateAction": {
            "H_LeaderMatchIndexValid": {
                "quant_inv": "\\A VS \\in Server : \\A VIND \\in DOMAIN log[VS] : \\A VM \\in appendEntriesMsgs : ",
                "quant_vars": ["VS", "VIND", "VM"],
                "preds":[
                    "state[VS] = Leader",
                    "state[VS] \\in { Follower, Candidate }",
                    "VM.mtype = AppendEntriesRequest /\\ Len(log[VS]) >= (VM.mprevLogIndex + 1)",
                    "VM.mtype = AppendEntriesRequest /\\ VM.mentries # << >>",
                    "VM.mtype = AppendEntriesRequest /\\ (VM.mprevLogIndex + 1) \\in DOMAIN log[VS] /\\ VM.mentries # << >> /\\ VM.mentries[1] > log[VS][(VM.mprevLogIndex + 1)]"
                ],
                "max_depth": 20
            }
        },
        "RequestVoteAction": {
            "H_LogEntryInTermImpliesSafeAtTermCandidateAppendEntries": {
                "quant_inv": "\\A VS \\in Server : \\A VM \\in appendEntriesRequestMsgs : ",
                "quant_vars": ["VS", "VIND", "VM"],
                "preds":[
                    "state[VS] = Leader",
                    "state[VS] \\in { Follower, Candidate }",
                    "VM.mtype = AppendEntriesRequest /\\ VM.mentries # << >>"
                ],
                "max_depth": 20
            }
        },
        "BecomeLeaderAction": {
            "H_LogMatchingInAppendEntriesMsgsLeaders": {
                "quant_inv": "\\A VS \\in Server : \\A VIND \\in DOMAIN log[VS] : \\A VM \\in appendEntriesRequestMsgs : \\E VQ \\in Quorum : \\A VN \\in VQ :",
                "quant_vars": ["VS", "VIND", "VM", "VQ", "VN"],
                "preds":[
                    "state[VS] = Leader",
                    "state[VS] \\in { Follower, Candidate }",
                    "votesGranted[VS] \\in Quorum",
                    "currentTerm[VN] >= currentTerm[VS]",
                    "VM.mtype = AppendEntriesRequest /\\ Len(log[VS]) >= (VM.mprevLogIndex + 1)",
                    "VM.mtype = AppendEntriesRequest /\\ VM.mentries # << >>",
                    "VM.mtype = AppendEntriesRequest /\\ (VM.mprevLogIndex + 1) \\in DOMAIN log[VS] /\\ VM.mentries # << >> /\\ VM.mentries[1] > log[VS][(VM.mprevLogIndex + 1)]"
                ],
                "max_depth": 19                
            }
        }
    },
    "tlaps_proof_config": {
        "assumes": [
            "IsFiniteSet(Server)",
            "MaxLogLen \\in Nat",
            "MaxTerm \\in Nat",
            "Nil \\notin Server",
            "(Leader # Follower) /\\ (Leader # Candidate)",
            "(Follower # Candidate)",
            "Server = {0,1}"
        ],
        "def_expands":{
            "HandleRequestVoteRequestAction": ["LastTerm","RequestVoteRequestType","RequestVoteResponseType","Terms","LogIndicesWithZero"]
        }
    }
}